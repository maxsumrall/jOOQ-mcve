/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.tables.Test;
import org.jooq.mcve.models.Status;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements Record2<Long, Status> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TEST.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>TEST.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>TEST.STATUS</code>.
     */
    public void setStatus(Status value) {
        set(1, value);
    }

    /**
     * Getter for <code>TEST.STATUS</code>.
     */
    public Status getStatus() {
        return (Status) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Status> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Status> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Test.TEST.ID;
    }

    @Override
    public Field<Status> field2() {
        return Test.TEST.STATUS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Status component2() {
        return getStatus();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Status value2() {
        return getStatus();
    }

    @Override
    public TestRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TestRecord value2(Status value) {
        setStatus(value);
        return this;
    }

    @Override
    public TestRecord values(Long value1, Status value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Long id, Status status) {
        super(Test.TEST);

        setId(id);
        setStatus(status);
    }
}
