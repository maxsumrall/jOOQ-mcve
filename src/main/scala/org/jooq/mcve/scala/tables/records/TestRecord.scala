/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables.records


import java.lang.Long

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.models.Status
import org.jooq.mcve.scala.tables.Test


/**
 * This class is generated by jOOQ.
 */
class TestRecord extends UpdatableRecordImpl[TestRecord](Test.TEST) with Record2[Long, Status] {

  /**
   * Setter for <code>mcve.test.id</code>.
   */
  def setId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>mcve.test.id</code>.
   */
  def getId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>mcve.test.status</code>.
   */
  def setStatus(value: Status): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>mcve.test.status</code>.
   */
  def getStatus: Status = get(1).asInstanceOf[Status]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Long] = super.key.asInstanceOf[ Record1[Long] ]

  // -------------------------------------------------------------------------
  // Record2 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row2[Long, Status] = super.fieldsRow.asInstanceOf[ Row2[Long, Status] ]

  override def valuesRow: Row2[Long, Status] = super.valuesRow.asInstanceOf[ Row2[Long, Status] ]
  override def field1: Field[Long] = Test.TEST.ID
  override def field2: Field[Status] = Test.TEST.STATUS
  override def component1: Long = getId
  override def component2: Status = getStatus
  override def value1: Long = getId
  override def value2: Status = getStatus

  override def value1(value: Long): TestRecord = {
    setId(value)
    this
  }

  override def value2(value: Status): TestRecord = {
    setStatus(value)
    this
  }

  override def values(value1 : Long, value2 : Status): TestRecord = {
    this.value1(value1)
    this.value2(value2)
    this
  }

  /**
   * Create a detached, initialised TestRecord
   */
  def this(id : Long, status : Status) = {
    this()

    this.setId(id)
    this.setStatus(status)
  }
}
